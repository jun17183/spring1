// //////////////////////////////////////////// << Controller >> ////////////////////////////////////////////
/*
    <Controller>
    Controller : Mapping 담당. 연결 담당 *
    @Controller => bean 등록 + 서블릿과 연결하여 요청을 받아 매핑된 메서드를 실행시켜줌
*/
/*
    <RequestMapping>
    RequestMapping 안에 입력한 주소로 요청이 들어오면 해당 메서드를 실행함
    RequestMapping의 () 안에는 다양한 옵션을 넣을 수 있는데, 옵션을 2개 이상 입력할 거라면 안의 주소도
    그냥 /login이라고 적으면 안 되고 value="/login"이라고 해야 한다.
*/
/*
    <RequestMethod>
    옵션 중에는 method가 있고 우리가 아는 그 get or post를 말한다. 물론 디폴트는 get
    (method=RequestMethod.GET or POST)
    같은 주소라도 get으로 요청받았을 때와 post로 요청받았을 때 구분 가능
*/
/*
    <redirect, viewResolver>
    mapping한 메서드의 return 은 redirect: 라는 키워드를 넣지 않는 이상
    무조건 디스패처서블릿을 통해 해당 return 문자열의 주소를 받아 실행시킨다. (디스패처 서블릿의 viewResolver 부분)
    redirect는 jsp에서의 sendRedirect랑 같은 기능. 거기로 넘기는 것
*/
/*
    <Autowired>
    @를 통해 bean 등록 => 객체를 생성했다는 말
    bean에 등록된, 생성된 객체를 Autowired를 통해 받아서(UserService) service라는 변수에 담음
*/
/*
    <RequestParam>
    @RequestParam => getParameter와 동일
    이 친구는 무조건 값을 받음. 그렇기에 err=? 라는 데이터가 넘어오지 않는다면 에러를 터뜨림
    그래서 required=false로 해주어야 함 (정확히는 값이 넘어오지 않았다면 주소창에 err=? 가 안 찍혀도 되도록 해줌)
    또한 값을 안 보낸다면 default 값을 0으로 주어 메세지를 보내지 않으면 자동으로 0이 넘어가도록 해준다.
    (사실 defaultValue를 주었기에 required는 없어도 큰 상관이 없다.)
    문자열을 넘겨줄 경우 값을 넘겨주기 싫을 땐 그냥 required만 해줘도 된다.
    string은 int와 달리 null을 받을 수 있기 때문
*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

// //////////////////////////////////////////// << Service >> ///////////////////////////////////////////////
// Service : 로직 담당
/*
    만약에 UserService1 implements UserServiceImpl 클래스와
    UserService2 implements UserServiceImpl 클래스가 있다고 하자. 둘다 UserServiceImpl을 상속하는.

    두 클래스를 @Service처럼 어노테이션을 사용하여 빈 등록(객체화)을 했다고 하자.
    이걸 Controller에서 사용하기 위해 @Autowired로 부르면 에러가 터진다.
    왜냐하면 UserServiceImpl 중에서 어떤 클래스를 사용해야 할지 모르기 때문. (반대로 하나도 없어도 에러가 터짐)
    이 경우를 막기 위해 @Service("service1") @Service("service2") 이렇게 빈 등록을 하고
    Controller에서 service1을 쓸지 2를 쓸지 입력을 해주면 된다.
    문제는 이 경우 소스 수정이 불가피하다는 점.

    소스 수정을 피하려면 xml을 이용하는 것이 좋다.
    xml에 UserService1과 UserService2를 만들어두고 이를 모두 객체화시킨다.
    또한 컨트롤러도 객체화시킨 후 해당 컨트롤러에 어떤 Service를 연결해 줄지를 정해주기만 하면 된다.
*/

// //////////////////////////////////////////// << Mapper >> ///////////////////////////////////////////////////
/*
    values 의 값은 service 가 넘겨줄 param 객체에 담긴 값 (UserEntity 의 멤버 변수)
    #는 문자열, $는 숫자 (사실 $는 거의 쓸 일이 없다. 숫자여도 그냥 # 이라고 해도 된다.)

    정확히 말하면 #는 ''가 붙고 $는 붙지 않음. 근데 가끔 $가 필요한 경우가 있음.
    만약 board_game, board_sports 등의 db를 짜야 할 때,
    board_#{menu} 이런 식으로 하면 board_'game' 이 되기에 오류가 터진다.
    board_${menu} 라고 한다면 board_game 이 정상적으로 찍힌다.

    =========================================================================

    #{} 안에 들어갈 값은 DB에 있는 실제 칼럼 명과 일치해야 한다. (=해당 칼럼을 넣는다는 말)

    =========================================================================

    interface 를 xml 이 구현하고 있는 느낌.

    parameterType 생략 가능.
    원래는 값으로 해당 값의 풀 주소를 적어야 하는데, UserEntity 파일에서 alias 를 해주었기에 그냥 저렇게 적어도 됨.
    (사실 alias 를 안 줘도 자동으로 동일한 이름의 alias 를 생성해 주기에, 등록 없이 UserEntity 를 적어줘도 된다.)

    resultType 은 생략하면 안 됨!
*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

// //////////////////////////////////////////// << etc >> ///////////////////////////////////////////////////
/*
    Entity  : DB table 그대로
    Domain  : join까지 한 데이터
    DTO     : param용(iboard, iuser, recordCnt, searchText 등등...)
*/
/*
    <out과 target 폴더>
    out은 서버(톰캣)에서 가동될 때, target은 실제 배포할 때 올라가는 폴더
*/
/////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
    ############################################# [ Error ] #################################################
    >> dispatcher not found
    - 서버 가동 오류 중 무슨 짓을 해도 dispatcher가 [/user/login] 등을 못찾는다고 나오면
      out의 artifacts 폴더를 한번 지워보는 것도 좋은 방법

    >> sessionFactory
    - sessionFactory 관련 에러가 뜰 경우 applicationContext의 sessionFactory의 value 값에 오타가 있는지 확인

    >> Library, ClassNotFoundException
    - 디펜던시에 라이브러리 추가 후 항상 open modules의 artifact에서 라이브러리를 넣어주어야 함
      artifact는 서버 가동 시 실행되는 out 폴더에 있는 폴더임. 우리가 사용하는 폴더에는 라이브러리가 적용이 되었지만
      서버에는 아직 라이브러리가 적용되지 않은 상태이기 때문에 항상 넣어주저야 함
      (라이브러리를 가져왔는데도 ClassNotFoundException 에러가 나오면 위 처리를 안 했을 가능성이 큼)

    >> 이미지나 경로 등과 관련된 문제
    - 일단 리빌드해보기, 그래도 안 되면 out 폴더의 artifact 삭제
*/